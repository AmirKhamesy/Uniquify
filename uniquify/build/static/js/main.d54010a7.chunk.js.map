{"version":3,"sources":["Song.js","Compare.js","App.js","serviceWorker.js","index.js"],"names":["Song","id","this","props","name","style","fontWeight","repeated","margin","Component","Compare","handleButtonClick","req","URL","document","getElementById","display","searchParams","append","state","list1","list2","fetch","then","res","json","console","log","comparePlaylist","songs1","songs2","addPlaylistName","playlistName1","playlistName2","showRepeated","p1","p2","setState","s1","s2","undefined","array1","map","songItem","dup","includes","array2","alert","event","target","value","pID","replace","substr","className","CompareStyles","wrapper","type","onChange","changeInput1","changeInput2","onClick","title","hideNonUnique","bind","filter","song","key","Math","random","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d54010a7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Song extends Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <li id={this.props.name} style={{ fontWeight: this.props.repeated ? 500 : 800, margin:\"1%\"}}>{this.props.name}</li>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport CompareStyles from \"./Compare.module.css\";\r\nimport Song from \"./Song\";\r\nimport axios from \"axios\";\r\n\r\nexport default class Compare extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            list1: \"3wgGItoJDDLMDUBCdYBQ2d\",\r\n            list2: \"2uwblsTCKkwr4fyTMh2qeI\",\r\n            songs1: [],\r\n            songs2: [],\r\n            showRepeated: true,\r\n            playlistName1: \"\",\r\n            playlistName2: \"\"\r\n        }\r\n    }\r\n\r\n    addPlaylistName(p1,p2){\r\n        if(p1,p2){\r\n            this.setState({\r\n                playlistName1: p1,\r\n                playlistName2: p2\r\n            });\r\n        }\r\n    }\r\n\r\n    comparePlaylist(s1,s2){\r\n        if(s1 === undefined || s2 === undefined){\r\n            alert(\"Invalid playlist ID, please try again!\");\r\n            return;\r\n        }\r\n        let array1 = s1.map(songItem => {\r\n            let dup=false;\r\n            if(s2.includes(songItem)) dup=true\r\n            return {\r\n                name: songItem,\r\n                repeated: dup\r\n            }\r\n        })\r\n        let array2 = s2.map(songItem => {\r\n            let dup=false;\r\n            if(s1.includes(songItem)) dup=true\r\n            return {\r\n                name: songItem,\r\n                repeated: dup\r\n            }\r\n        })\r\n        this.setState({\r\n            songs1 : array1,\r\n            songs2 : array2\r\n        })\r\n    }\r\n\r\n    handleButtonClick = () => {\r\n        const req = new URL(\"https://uniquify.herokuapp.com/compare/\");\r\n        document.getElementById('loader').style.display = 'block';\r\n        req.searchParams.append(\"song1\", this.state.list1);\r\n        req.searchParams.append(\"song2\", this.state.list2);\r\n        try{\r\n            fetch(req)\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    console.log(res);\r\n                    this.comparePlaylist(res.songs1,res.songs2);\r\n                    this.addPlaylistName(res.playlistName1, res.playlistName2);\r\n                    document.getElementById('loader').style.display = 'none';\r\n                })\r\n        }catch{\r\n            console.log(\"failed to fetch\");\r\n        }\r\n    }\r\n\r\n    hideNonUnique() {\r\n        this.setState({showRepeated: !this.state.showRepeated})\r\n    }\r\n    changeInput1(event) {\r\n        //Change playlist ID URI\r\n        if(event.target.value.includes(\"spotify:playlist:\")){\r\n            var pID = event.target.value.replace(\"spotify:playlist:\", \"\");\r\n            this.setState({list1: pID});\r\n        //Chance playlist ID link\r\n        }else if (event.target.value.includes(\"https://open.spotify.com/playlist/\")) {\r\n            var pID = event.target.value.substr(34,22);\r\n            this.setState({list1: pID});\r\n        //Assume its raw playlist ID\r\n        }else {\r\n            this.setState({list1: event.target.value});\r\n        }\r\n    }\r\n    changeInput2(event) {\r\n        //Change playlist ID URI\r\n        if(event.target.value.includes(\"spotify:playlist:\")){\r\n            var pID = event.target.value.replace(\"spotify:playlist:\", \"\");\r\n            this.setState({list2: pID});\r\n        //Chance playlist ID link\r\n        }else if (event.target.value.includes(\"https://open.spotify.com/playlist/\")) {\r\n            var pID = event.target.value.substr(34,22);\r\n            this.setState({list2: pID});\r\n        //Assume its raw playlist ID\r\n        }else {\r\n            this.setState({list2: event.target.value});\r\n        }\r\n    }\r\n    //https://open.spotify.com/playlist/3wgGItoJDDLMDUBCdYBQ2d?si=Bw0DiT0bQR6EZEF96GEO6w\r\n    //https://open.spotify.com/playlist/2uwblsTCKkwr4fyTMh2qeI?si=zKs-_abBQDuDXb8X2jXzyQ\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <div className={CompareStyles.wrapper} id={CompareStyles.wrapper} >\r\n                <h3>Welcome to Uniquify!</h3><br></br> \r\n                <p>To get started simply put two Spotify playlists IDs which can be located under \"share\" then click \"Copy Spotify URI\"</p>\r\n                <p>Keep in mind both playlist that you want to compare have to be PUBLIC!</p>\r\n                <input type=\"text\" id='playList1' onChange={event => this.changeInput1(event)}></input>\r\n                <input type=\"text\" id='playList2' onChange={event => this.changeInput2(event)}></input><br></br>\r\n                {/* <input type=\"text\" id='playList1' onChange={event => {if(event.target.value.includes(\"spotify:playlist:\")){var pID = event.target.value.replace(\"spotify:playlist:\", \"\"); this.setState({list1: pID})}else{this.setState({list1: event.target.value})}}}></input>\r\n                <input type=\"text\" id='playList2' onChange={event => {if(event.target.value.includes(\"spotify:playlist:\")){var pID = event.target.value.replace(\"spotify:playlist:\", \"\"); this.setState({list2: pID})}else{this.setState({list2: event.target.value})}}}></input><br></br> */}\r\n                <button onClick={this.handleButtonClick}>Get list</button><br></br>\r\n                <div id=\"loader\"></div>\r\n                <ol id=\"list1\" title={this.state.playlistName1} onClick={this.hideNonUnique.bind(this)}>\r\n                    {this.state.songs1.filter(song => this.state.showRepeated || !song[\"repeated\"]).map(song => <Song name={song[\"name\"]} repeated={song[\"repeated\"]} key={song[\"name\"]+Math.random()}/>)}\r\n                </ol>\r\n                <ol id=\"list2\" title={this.state.playlistName2} onClick={this.hideNonUnique.bind(this)}>\r\n                    {this.state.songs2.filter(song => this.state.showRepeated || !song[\"repeated\"]).map(song => <Song name={song[\"name\"]} repeated={song[\"repeated\"]} key={song[\"name\"]+Math.random()+1.1}/>)}\r\n                </ol>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Compare from \"./Compare\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Compare/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}